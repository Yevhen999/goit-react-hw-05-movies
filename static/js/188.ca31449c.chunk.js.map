{"version":3,"file":"static/js/188.ca31449c.chunk.js","mappings":"qPAmBA,EAjBkB,SAAC,GAAkB,IAAhBA,EAAe,EAAfA,SAOnB,OACE,0BACE,kBAAMA,SARW,SAAAC,GACnBA,EAAEC,iBACF,IAAQC,EAAUF,EAAEG,OAAOC,KAAnBF,MACRH,EAASG,EACV,EAIG,WACE,kBAAOG,KAAK,OAAOD,KAAK,UACxB,mBAAQC,KAAK,SAAb,wBAIP,E,kBCuBD,EAnCkB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnB,GAA0CC,EAAAA,EAAAA,UAAS,MAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAW,mCAAG,WAAMC,GAAN,iGAEGC,EAAAA,EAAAA,IAAaD,GAFhB,OAEVE,EAFU,OAGhBR,EAAiBQ,GAHD,gDAKhBN,EAAS,mBALO,yDAAH,sDAQjB,OACE,2BACqB,OAAlBH,IACC,wBACGF,EAAOY,KAAI,gBAAGC,EAAH,EAAGA,MAAOJ,EAAV,EAAUA,GAAV,OACV,yBACE,SAAC,KAAD,CACEK,GAAE,kBAAaL,GACfM,MAAO,CAAEC,KAAMV,GACfW,QAAS,kBAAMT,EAAYC,EAAlB,EAHX,SAKGI,KANIJ,EADC,MAafL,IAAS,wBAAKA,MAGpB,E,SCqBD,EApDe,WAAO,IAAD,EACnB,GAA4BH,EAAAA,EAAAA,UAAS,IAArC,eAAOD,EAAP,KAAekB,EAAf,KACA,GAAkCjB,EAAAA,EAAAA,WAAS,GAA3C,eAAOkB,EAAP,KAAkBC,EAAlB,KACA,GAA0BnB,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAwCgB,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAQF,EAAaG,IAAb,UAAiB,SAAjB,EAA4B,KAE1CC,EAAAA,EAAAA,YAAU,WACR,GAAc,KAAVF,EAAJ,CAGA,IAAMG,EAAS,mCAAG,sGAEdP,GAAa,GAFC,UAGYQ,EAAAA,EAAAA,IAAiBJ,GAH7B,gBAGNK,EAHM,EAGNA,QACRX,EAAUW,GACVT,GAAa,GALC,kDAOdf,EAAS,mBAPK,0DAAH,qDAUfsB,GAXC,CAYF,GAAE,CAACH,IAMJ,OACE,4BACGL,IACC,SAAC,KAAD,CACEW,OAAQ,GACRC,MAAO,GACPC,MAAM,UACNC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,EACTC,UAAU,eACVC,eAAe,UACfC,YAAa,EACbC,qBAAsB,KAGxBpB,IAAa,SAAC,EAAD,CAAW1B,SApBJ,SAAA+C,GACxBjB,EAA8B,KAAdiB,EAAmB,CAAEhB,MAAOgB,GAAc,CAAC,EAC5D,KAmBKrB,GAAuB,OAAVK,IAAkB,SAAC,EAAD,CAAWxB,OAAQA,IACnDI,IAAS,wBAAKA,MAGpB,C","sources":["components/SearchBox/SearchBox.jsx","components/MovieList/MovieList.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\n\nconst SearchBox = ({ onSubmit }) => {\n  const handleSubmit = e => {\n    e.preventDefault();\n    const { value } = e.target.name;\n    onSubmit(value);\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" name=\"name\" />\n        <button type=\"submit\">Search</button>\n      </form>\n    </div>\n  );\n};\n\nexport default SearchBox;\n\nSearchBox.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { Link, useLocation } from 'react-router-dom';\nimport { useState } from 'react';\nimport { getMovieById } from 'services/api';\nimport PropTypes from 'prop-types';\n\nconst MovieList = ({ movies }) => {\n  const [selectedMovie, setSelectedMovie] = useState(null);\n  const [error, setError] = useState(null);\n  const location = useLocation();\n\n  const selectMovie = async id => {\n    try {\n      const resp = await getMovieById(id);\n      setSelectedMovie(resp);\n    } catch {\n      setError('Failed to fetch');\n    }\n  };\n  return (\n    <div>\n      {selectedMovie === null && (\n        <ul>\n          {movies.map(({ title, id }) => (\n            <li key={id}>\n              <Link\n                to={`/movies/${id}`}\n                state={{ from: location }}\n                onClick={() => selectMovie(id)}\n              >\n                {title}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n      {error && <h2>{error}</h2>}\n    </div>\n  );\n};\n\nexport default MovieList;\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n    })\n  ),\n};\n","import { useSearchParams } from 'react-router-dom';\nimport { getMoviesByQuery } from 'services/api';\nimport SearchBox from 'components/SearchBox/SearchBox';\nimport MovieList from 'components/MovieList/MovieList';\nimport { useState, useEffect } from 'react';\nimport { Oval } from 'react-loader-spinner';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const query = searchParams.get('query' ?? '');\n\n  useEffect(() => {\n    if (query === '') {\n      return;\n    }\n    const getMovies = async () => {\n      try {\n        setIsLoading(true);\n        const { results } = await getMoviesByQuery(query);\n        setMovies(results);\n        setIsLoading(false);\n      } catch {\n        setError('Failed to fetch');\n      }\n    };\n    getMovies();\n  }, [query]);\n\n  const updateQueryString = movieName => {\n    setSearchParams(movieName !== '' ? { query: movieName } : {});\n  };\n\n  return (\n    <main>\n      {isLoading && (\n        <Oval\n          height={80}\n          width={80}\n          color=\"#4fa94d\"\n          wrapperStyle={{}}\n          wrapperClass=\"\"\n          visible={true}\n          ariaLabel=\"oval-loading\"\n          secondaryColor=\"#4fa94d\"\n          strokeWidth={2}\n          strokeWidthSecondary={2}\n        />\n      )}\n      {!isLoading && <SearchBox onSubmit={updateQueryString} />}\n      {!isLoading && query !== null && <MovieList movies={movies} />}\n      {error && <h2>{error}</h2>}\n    </main>\n  );\n};\n\nexport default Movies;\n"],"names":["onSubmit","e","preventDefault","value","target","name","type","movies","useState","selectedMovie","setSelectedMovie","error","setError","location","useLocation","selectMovie","id","getMovieById","resp","map","title","to","state","from","onClick","setMovies","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","query","get","useEffect","getMovies","getMoviesByQuery","results","height","width","color","wrapperStyle","wrapperClass","visible","ariaLabel","secondaryColor","strokeWidth","strokeWidthSecondary","movieName"],"sourceRoot":""}